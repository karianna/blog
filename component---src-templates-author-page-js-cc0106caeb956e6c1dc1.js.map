{"version":3,"sources":["webpack:///./src/components/profilepic.js","webpack:///./src/components/authorbio.js","webpack:///./src/templates/author-page.js","webpack:///./src/components/articlepreview.js"],"names":["ProfilePic","props","profilePic","useStaticQuery","avatar","edges","find","item","node","name","identifier","fixed","childImageSharp","alt","style","marginRight","rhythm","marginBottom","minWidth","borderRadius","imgStyle","GitHubLink","className","href","icon","TwitterLink","LinkedinLink","AuthorBio","author","display","summary","github","twitter","linkedin","authorPageQuery","AuthorPage","data","pageContext","location","siteTitle","site","siteMetadata","title","AuthorData","posts","allMdx","description","map","frontmatter","key","fields","slug","date","postPath","excerpt","tags","ArticlePreview","boxShadow","to"],"mappings":"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","file":"component---src-templates-author-page-js-cc0106caeb956e6c1dc1.js","sourcesContent":["import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Image from \"gatsby-image\";\n\nimport { rhythm } from \"../utils/typography\";\n\nconst ProfilePic = (props) => {\n  const data = useStaticQuery(graphql`\n    query ProfilePicQuery {\n      avatar: allFile(filter: { absolutePath: { regex: \"/authors/\" } }) {\n        edges {\n          node {\n            name\n            childImageSharp {\n              fixed(width: 50, height: 50) {\n                ...GatsbyImageSharpFixed\n              }\n            }        \n          }\n        }\n      }\n    }\n  `);\n\n  const profilePic = data.avatar.edges.find(item => item.node.name === props.identifier);\n  if (!profilePic) {\n    return null;\n  }\n\n  return (\n    <Image\n      fixed={profilePic.node.childImageSharp.fixed}\n      alt={props.name}\n      style={{\n        marginRight: rhythm(1 / 2),\n        marginBottom: 0,\n        minWidth: 50,\n        borderRadius: \"100%\",\n      }}\n      imgStyle={{\n        borderRadius: \"50%\",\n      }}\n    />\n  );\n};\n\nexport default ProfilePic;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport ProfilePic from \"./profilepic\";\nimport { rhythm } from \"../utils/typography\";\n\nconst GitHubLink = (props) => {\n  if (!props.name) {\n    return null;\n  }\n\n  return (\n    <a className=\"no-underline\" href={`https://github.com/${props.name}`}><FontAwesomeIcon icon={[\"fab\", \"github\"]} /></a>\n  );\n};\n\nconst TwitterLink = (props) => {\n  if (!props.name) {\n    return null;\n  }\n\n  return (\n    <a className=\"no-underline\" href={`https://twitter.com/${props.name}`}><FontAwesomeIcon icon={[\"fab\", \"twitter\"]} /></a>\n  );\n};\n\nconst LinkedinLink = (props) => {\n  if (!props.name) {\n    return null;\n  }\n\n  return (\n    <a className=\"no-underline\" href={`https://www.linkedin.com/in/${props.name}`}><FontAwesomeIcon icon={[\"fab\", \"linkedin\"]} /></a>\n  );\n};\n\n\nconst AuthorBio = (props) => {\n  const author = props.author;\n  const identifier = props.identifier;\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        marginBottom: rhythm(1),\n      }}\n    >\n      <ProfilePic identifier={identifier} name={author.name} />\n      <p>\n        {author.summary &&\n         <>{author.summary}</>\n        }\n        {\" \"}\n        <GitHubLink name={author.github} />\n        {\" \"}\n        <TwitterLink name={author.twitter} />\n        {\" \"}\n        <LinkedinLink name={author.linkedin} />\n      </p>\n    </div>\n  );\n};\n\nexport default AuthorBio;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport AuthorBio from \"../components/authorbio\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport AuthorData from \"../../content/authors.json\";\nimport ArticlePreview from \"../components/articlepreview\";\nimport { rhythm } from \"../utils/typography\";\n\n\nconst AuthorPage = ({ data, pageContext, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n\n  const author = AuthorData[pageContext.author];\n  const posts = data.allMdx.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={author.name}\n        description={author.summary}\n      />\n      <h1>{author.name}</h1>\n      <AuthorBio identifier={pageContext.author} author={author} />\n\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title;\n        return (\n          <ArticlePreview\n            key={node.fields.slug}\n            author={author.name}\n            date={node.frontmatter.date}\n            postPath={node.fields.postPath}\n            title={title}\n            description={node.frontmatter.description}\n            identifier={pageContext.author}\n            excerpt={node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n    </Layout>\n  );\n\n};\n\nexport default AuthorPage;\n\nexport const authorPageQuery = graphql`\n  query authorPageQuery($author: String!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n        filter: {frontmatter: {author: {eq: $author}}}\n        sort: { fields: [frontmatter___date], order: DESC }\n        limit: $limit\n    ) {\n        edges {\n        node {\n            fields {\n                slug,\n                postPath\n            }\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                title\n                description\n                tags\n            }\n        }\n      }\n    }\n  }\n`;","import React from \"react\";\nimport { Link } from \"gatsby\";\n\nimport Byline from \"./byline\";\nimport { rhythm } from \"../utils/typography\";\n\n/**\n * Article intro displayed on front page, archive, author page.\n */\nconst ArticlePreview = (props) => {\n  const author = props.author;\n  const date = props.date;\n  const postPath = props.postPath;\n  const title = props.title;\n  const description = props.description;\n  const excerpt = props.excerpt;\n  const identifier = props.identifier;\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: \"none\" }} to={postPath}>\n            {title}\n          </Link>\n        </h3>\n        <Byline author={author} date={date} identifier={identifier}/>\n      </header>\n      <section>\n        <p>\n          {description || excerpt} <Link to={postPath}>Read more</Link>\n        </p>\n      </section>\n    </article>\n  );\n};\n\nexport default ArticlePreview;\n"],"sourceRoot":""}